"use client"

import { useState, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { ArrowUpCircle, ArrowDownCircle, RefreshCw } from "lucide-react"
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ComposedChart, Bar } from 'recharts'
import { ChartContainer, ChartTooltip } from "@/components/ui/chart"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  SelectGroup,
  SelectLabel,
} from "@/components/ui/select"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import Image from "next/image"

const countries = [
  { code: "DE", name: "Germany", icon: "🇩🇪", language: "de" },
  { code: "US", name: "United States", icon: "🇺🇸", language: "en" },
  { code: "FR", name: "France", icon: "🇫🇷", language: "fr" },
  { code: "ES", name: "Spain", icon: "🇪🇸", language: "es" },
  { code: "IT", name: "Italy", icon: "🇮🇹", language: "it" },
  { code: "JP", name: "Japan", icon: "🇯🇵", language: "ja" },
]

const financialInstruments = [
  { category: "Currencies", items: ["EURUSD", "GBPUSD", "USDJPY", "USDCHF", "AUDUSD", "USDCAD", "NZDUSD", "EURGBP", "EURJPY", "GBPJPY"] },
  { category: "Crypto", items: ["BTCUSD", "ETHUSD", "XRPUSD", "LTCUSD", "ADAUSD"] },
  { category: "Indices", items: ["US30", "SPX500", "NASDAQ", "UK100", "GER30", "JPN225"] },
  { category: "Stocks", items: ["AAPL", "GOOGL", "MSFT", "AMZN", "FB"] },
  { category: "ETFs", items: ["SPY", "QQQ", "IWM", "EFA", "VGK"] },
  { category: "Futures", items: ["CL", "GC", "SI", "ZC", "ZS"] },
  { category: "Bonds", items: ["US10Y", "DE10Y", "UK10Y", "JP10Y", "AU10Y"] }
]

const fetchLiveData = async (symbol: string) => {
  try {
    const response = await fetch(`https://api.example.com/v1/quotes/${symbol}`)
    if (!response.ok) {
      throw new Error('Network response was not ok')
    }
    const data = await response.json()
    return {
      open: data.open,
      high: data.high,
      low: data.low,
      close: data.close,
      volume: data.volume
    }
  } catch (error) {
    console.error("Error fetching live data:", error)
    throw error
  }
}

export default function Teddy() {
  const [symbol, setSymbol] = useState("EURUSD")
  const [prices, setPrices] = useState({ open: '', high: '', low: '', current: '', averageClose: '' })
  const [capital, setCapital] = useState(10000)
  const [risk, setRisk] = useState(2)
  const [results, setResults] = useState<any>(null)
  const [currentDateTime, setCurrentDateTime] = useState(new Date())
  const [selectedCountry, setSelectedCountry] = useState(countries[0])
  const [isLoading, setIsLoading] = useState(false)
  const [candlestickData, setCandlestickData] = useState<any[]>([])
  const [manualInput, setManualInput] = useState(false)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const timer = setInterval(() => setCurrentDateTime(new Date()), 1000)
    return () => clearInterval(timer)
  }, [])

  useEffect(() => {
    const updateLiveData = async () => {
      if (manualInput) return;
      setIsLoading(true);
      setError(null);
      try {
        const newPrices = await fetchLiveData(symbol);
        const newDataPoint = {
          ...newPrices,
          time: new Date().toLocaleTimeString(),
        };
        setCandlestickData(prevData => {
          const updatedData = [...prevData, newDataPoint].slice(-20);
          return updatedData.sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime());
        });
        const averageClose = calculateAverageClose([...candlestickData, newDataPoint]);
        setPrices({
          open: newPrices.open.toFixed(4),
          high: newPrices.high.toFixed(4),
          low: newPrices.low.toFixed(4),
          current: newPrices.close.toFixed(4),
          averageClose: averageClose,
        });
      } catch (error) {
        console.error("Error fetching live data:", error);
        setError("Failed to fetch live data. Please try again later.");
      } finally {
        setIsLoading(false);
      }
    };
    updateLiveData()
    const intervalId = setInterval(updateLiveData, 60000) // 1 minute interval
    return () => clearInterval(intervalId)
  }, [symbol, manualInput, candlestickData])

  const calculateAverageClose = (data: any[]): string => {
    if (data.length === 0) return '0';
    const sum = data.reduce((acc, curr) => acc + curr.close, 0);
    return (sum / data.length).toFixed(4);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    const calculatedResults = calculateFibonacciLevels()
    if (calculatedResults) {
      setResults(calculatedResults)
    } else {
      console.error("Unable to calculate Fibonacci levels")
    }
  }

  const calculateFibonacciLevels = () => {
    const open = parseFloat(prices.open)
    const high = parseFloat(prices.high)
    const low = parseFloat(prices.low)
    const current = parseFloat(prices.current)
    if (isNaN(open) || isNaN(high) || isNaN(low) || isNaN(current)) {
      return null
    }
    const trend = current >= open ? "Bullish" : "Bearish"
    const range = trend === "Bullish" ? high - low : low - high
    
    const fiboLevels = [0, 0.236, 0.382, 0.5, 0.618, 0.786, 1, 1.618, 2.618, 4.236]
    
    const fibLevels = fiboLevels.map(level => {
      const price = trend === "Bullish"
        ? low + (range * level)
        : high - (range * level)
      return {
        fibonacci: `${(level * 100).toFixed(1)}%`,
        fibonacciValue: level,
        price: price,
        pips: Math.abs(price - current) / 0.0001,
      }
    })

    const takeProfit = trend === "Bullish" ? fibLevels[fibLevels.length - 1].price : fibLevels[0].price
    const stopLoss = trend === "Bullish" ? low : high

    const positionSize = calculatePositionSize(capital, risk, Math.abs(current - stopLoss) / 0.0001)

    return { fibLevels, positionSize, priceData: prices, trend, takeProfit, stopLoss }
  }

  const calculatePositionSize = (capital: number, risk: number, pipDistance: number) => {
    return ((capital * risk) / 100) / pipDistance
  }

  const formatCurrency = (value: number | string): string => {
    if (typeof value === 'number') {
      return value.toFixed(4)
    }
    return value
  }

  const formatDate = (date: Date) => {
    return new Intl.DateTimeFormat(selectedCountry.language, {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric',
      second: 'numeric',
      timeZone: 'Europe/Berlin',
    }).format(date)
  }

  const getSelectedCategory = () => {
    return financialInstruments.find(category => category.items.includes(symbol))?.category || '';
  }

  const handlePriceChange = (field: string, value: string) => {
    setPrices(prev => ({ ...prev, [field]: value || '' }))
  }

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      return (
        <div className="bg-white p-2 border border-gray-300 rounded shadow">
          <p className="font-bold">{label}</p>
          <p>Open: {formatCurrency(payload[2].value)}</p>
          <p>High: {formatCurrency(payload[1].value)}</p>
          <p>Low: {formatCurrency(payload[0].value)}</p>
          <p>Close: {formatCurrency(payload[3].value)}</p>
          <p>Volume: {payload[4].value.toLocaleString()}</p>
        </div>
      );
    }
    return null;
  };

  return (
    <div className="min-h-screen bg-gray-100 relative">
      <div className="bg-white shadow-md">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center">
            <Image
              src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/fib-gLw6tUc0Zu70qLfd7O2oUYmSvZSDWv.png"
              alt="Fibonacci Logo"
              width={50}
              height={50}
              className="mr-4"
            />
            <h1 className="text-2xl font-bold">Fibonacci</h1>
          </div>
          <div className="flex items-center space-x-4">
            <span>{formatDate(currentDateTime)}</span>
            <Select
              value={selectedCountry.code}
              onValueChange={(value) => setSelectedCountry(countries.find(c => c.code === value) || countries[0])}
            >
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Select a country" />
              </SelectTrigger>
              <SelectContent>
                {countries.map((country) => (
                  <SelectItem key={country.code} value={country.code}>
                    <div className="flex items-center">
                      <span className="mr-2">{country.icon}</span>
                      <span>{country.name}</span>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-8 space-y-8">
        {error && (
          <Alert variant="destructive">
            <AlertTitle>Error</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <Card>
          <CardHeader>
            <CardTitle>Live Candlestick Chart - {symbol}</CardTitle>
            <CardDescription className="text-lg font-semibold">
              {formatCurrency(prices.current)} {' '}
              <span className={prices.current >= prices.open ? 'text-green-600' : 'text-red-600'}>
                {prices.current >= prices.open ? '+' : '-'}
                {formatCurrency(Math.abs(parseFloat(prices.current) - parseFloat(prices.open)))} 
                ({((parseFloat(prices.current) - parseFloat(prices.open)) / parseFloat(prices.open) * 100).toFixed(2)}%)
              </span>
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-[400px]">
              <ChartContainer
                config={{
                  candlestick: {
                    label: "Price",
                    color: "hsl(var(--chart-1))",
                  },
                  volume: {
                    label: "Volume",
                    color: "hsl(var(--chart-2))",
                  },
                }}
                className="h-full"
              >
                <ResponsiveContainer width="100%" height="100%">
                  <ComposedChart data={candlestickData}>
                    <XAxis dataKey="time" />
                    <YAxis yAxisId="price" domain={['auto', 'auto']} />
                    <YAxis yAxisId="volume" orientation="right" />
                    <Tooltip content={<CustomTooltip />} />
                    <Legend />
                    <Bar yAxisId="volume" dataKey="volume" fill="var(--color-volume)" opacity={0.3} />
                    <Bar
                      yAxisId="price"
                      dataKey="low"
                      fill="transparent"
                      stroke="var(--color-candlestick)"
                    />
                    <Bar
                      yAxisId="price"
                      dataKey="high"
                      fill="transparent"
                      stroke="var(--color-candlestick)"
                    />
                    <Bar
                      yAxisId="price"
                      dataKey="open"
                      fill={(props) => (props.open > props.close ? "var(--color-candlestick-down)" : "var(--color-candlestick-up)")}
                      stroke="var(--color-candlestick)"
                    />
                    <Bar
                      yAxisId="price"
                      dataKey="close"
                      fill={(props) => (props.open > props.close ? "var(--color-candlestick-up)" : "var(--color-candlestick-down)")}
                      stroke="var(--color-candlestick)"
                    />
                  </ComposedChart>
                </ResponsiveContainer>
              </ChartContainer>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Calculator Input - {getSelectedCategory()}</CardTitle>
            <CardDescription>Enter currency pair details and risk parameters</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <Label htmlFor="symbol">Currency Pair Symbol</Label>
                <Select value={symbol} onValueChange={setSymbol}>
                  <SelectTrigger className="w-full">
                    
                    <SelectValue placeholder="Select financial instrument" />
                  </SelectTrigger>
                  <SelectContent>
                    {financialInstruments.map((category) => (
                      <SelectGroup key={category.category}>
                        <SelectLabel>{category.category}</SelectLabel>
                        {category.items.map((item) => (
                          <SelectItem key={item} value={item}>
                            {item}
                          </SelectItem>
                        ))}
                      </SelectGroup>
                    ))}
                  </SelectContent>
                </Select>
                <div className="flex flex-wrap gap-2 mt-2">
                  {financialInstruments.map((category) => (
                    <Button
                      key={category.category}
                      variant="outline"
                      size="sm"
                      className={`text-xs ${
                        category.items.includes(symbol) ? 'bg-primary text-primary-foreground' : ''
                      }`}
                      onClick={() => setSymbol(category.items[0])}
                    >
                      {category.category}
                    </Button>
                  ))}
                </div>
                <p className="text-sm text-gray-500 mt-2">
                  Disclaimer: This calculator is for educational purposes only. Not all instruments may be available or suitable for Fibonacci analysis.
                </p>
              </div>
              <div className="flex items-center space-x-2">
                <Label htmlFor="manual-input">Manual Input</Label>
                <input
                  type="checkbox"
                  id="manual-input"
                  checked={manualInput}
                  onChange={(e) => setManualInput(e.target.checked)}
                />
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="open">Open Price</Label>
                  <Input
                    id="open"
                    type="text"
                    inputMode="decimal"
                    value={prices.open}
                    onChange={(e) => handlePriceChange('open', e.target.value)}
                    readOnly={!manualInput}
                    className={manualInput ? '' : 'bg-gray-100'}
                  />
                </div>
                <div>
                  <Label htmlFor="high">Highest Price</Label>
                  <Input
                    id="high"
                    type="text"
                    inputMode="decimal"
                    value={prices.high}
                    onChange={(e) => handlePriceChange('high', e.target.value)}
                    readOnly={!manualInput}
                    className={manualInput ? '' : 'bg-gray-100'}
                  />
                </div>
                <div>
                  <Label htmlFor="low">Lowest Price</Label>
                  <Input
                    id="low"
                    type="text"
                    inputMode="decimal"
                    value={prices.low}
                    onChange={(e) => handlePriceChange('low', e.target.value)}
                    readOnly={!manualInput}
                    className={manualInput ? '' : 'bg-gray-100'}
                  />
                </div>
                <div>
                  <Label htmlFor="current">Current Price</Label>
                  <Input
                    id="current"
                    type="text"
                    inputMode="decimal"
                    value={prices.current}
                    onChange={(e) => handlePriceChange('current', e.target.value)}
                    readOnly={!manualInput}
                    className={manualInput ? '' : 'bg-gray-100'}
                  />
                </div>
                <div>
                  <Label htmlFor="averageClose">Average Close</Label>
                  <Input
                    id="averageClose"
                    type="text"
                    inputMode="decimal"
                    value={prices.averageClose}
                    readOnly
                    className="bg-gray-100"
                  />
                </div>
              </div>
              <div className="relative">
                <span className="absolute left-3 top-1/2 transform -translate-y-1/2">$</span>
                <Input
                  id="capital"
                  type="text"
                  inputMode="decimal"
                  value={capital}
                  onChange={(e) => setCapital(parseFloat(e.target.value) || 0)}
                  className="pl-8"
                  required
                />
              </div>
              <div className="relative">
                <Input
                  id="risk"
                  type="text"
                  inputMode="decimal"
                  value={risk}
                  onChange={(e) => setRisk(parseFloat(e.target.value) || 0)}
                  step="0.1"
                  className="pr-8"
                  required
                />
                <span className="absolute right-3 top-1/2 transform -translate-y-1/2">%</span>
              </div>
              <Button type="submit" disabled={isLoading}>
                {isLoading ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    Updating...
                  </>
                ) : (
                  'Calculate Fibonacci Levels'
                )}
              </Button>
            </form>
          </CardContent>
        </Card>

        {results && results.fibLevels && (
          <Card>
            <CardHeader>
              <CardTitle>Results for {symbol}</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Fibonacci Level</TableHead>
                    <TableHead>Price</TableHead>
                    <TableHead>Pips from Current</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {results.fibLevels.map((level: any, index: number) => (
                    <TableRow key={index}>
                      <TableCell>{level.fibonacci}</TableCell>
                      <TableCell>{formatCurrency(level.price)}</TableCell>
                      <TableCell>{formatCurrency(level.pips)}</TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              <div className="mt-4 space-y-2">
                <p>Trend: {results.trend} {results.trend === "Bullish" ? <ArrowUpCircle className="inline text-green-500" /> : <ArrowDownCircle className="inline text-red-500" />}</p>
                <p>Market Sentiment: {results.trend === "Bullish" ? "Hawkish" : "Dovish"}</p>
                <p>Recommended Position Size: {formatCurrency(results.positionSize)}</p>
                <p>Take Profit: {formatCurrency(results.takeProfit)}</p>
                <p>Stop Loss: {formatCurrency(results.stopLoss)}</p>
              </div>
              <div className="h-[400px] mt-8">
                <ChartContainer
                  config={{
                    price: {
                      label: "Price",
                      color: "hsl(var(--chart-1))",
                    },
                    fibonacci: {
                      label: "Fibonacci Level",
                      color: "hsl(var(--chart-2))",
                    },
                  }}
                  className="h-full"
                >
                  <ResponsiveContainer width="100%" height="100%">
                    <ComposedChart data={results.fibLevels}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="fibonacci" />
                      <YAxis 
                        yAxisId="price"
                        domain={['auto', 'auto']}
                        tickFormatter={(value) => formatCurrency(value)}
                      />
                      <YAxis 
                        yAxisId="fibonacci"
                        orientation="right"
                        domain={[0, 4.236]}
                        tickFormatter={(value) => `${(value * 100).toFixed(1)}%`}
                      />
                      <ChartTooltip 
                        content={({ active, payload, label }) => {
                          if (active && payload && payload.length) {
                            return (
                              <div className="bg-white p-2 border border-gray-300 rounded shadow">
                                <p className="font-bold">{label}</p>
                                <p>Price: {formatCurrency(payload[0].value)}</p>
                                <p>Fibonacci: {payload[1].value.toFixed(3)}</p>
                              </div>
                            );
                          }
                          return null;
                        }}
                      />
                      <Legend />
                      <Line 
                        type="monotone" 
                        dataKey="price" 
                        yAxisId="price"
                        stroke="var(--color-price)" 
                        name="Price" 
                        dot={false}
                      />
                      <Line 
                        type="monotone" 
                        dataKey={(data) => parseFloat(data.fibonacci) / 100} 
                        yAxisId="fibonacci"
                        stroke="var(--color-fibonacci)" 
                        name="Fibonacci Level" 
                        dot={false}
                      />
                      {results.trend === "Bullish" ? (
                        <ArrowUpCircle className="text-green-500" x="90%" y="10%" width={24} height={24} />
                      ) : (
                        <ArrowDownCircle className="text-red-500" x="90%" y="90%" width={24} height={24} />
                      )}
                    </ComposedChart>
                  </ResponsiveContainer>
                </ChartContainer>
              </div>
            </CardContent>
          </Card>
        )}
        <footer className="text-center text-sm text-gray-500">
          <p>Copyright ©️ All rights reserved Teddy 2024</p>
        </footer>
      </div>
    </div>
  )
}
